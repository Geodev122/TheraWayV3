extend type Query {
  """
  ✨ Look up a single `Appointment` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  appointment(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Appointment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Appointment_FirstRow
  ): Appointment @fdc_generated(from: "Appointment", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Booking` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  booking(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Booking_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Booking_FirstRow
  ): Booking @fdc_generated(from: "Booking", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Clinic` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  clinic(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Clinic_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Clinic_FirstRow
  ): Clinic @fdc_generated(from: "Clinic", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `ClinicSpace` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  clinicSpace(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ClinicSpace_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ClinicSpace_FirstRow
  ): ClinicSpace @fdc_generated(from: "ClinicSpace", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Review` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  review(
    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow
  ): Review @fdc_generated(from: "Review", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Therapist` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  therapist(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Therapist_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Therapist_FirstRow
  ): Therapist @fdc_generated(from: "Therapist", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Appointment` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  appointments(
    """
    Filter condition to narrow down the query results.
    """
    where: Appointment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Appointment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Appointment_Having
  ): [Appointment!]! @fdc_generated(from: "Appointment", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Booking` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  bookings(
    """
    Filter condition to narrow down the query results.
    """
    where: Booking_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Booking_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Booking_Having
  ): [Booking!]! @fdc_generated(from: "Booking", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Clinic` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  clinics(
    """
    Filter condition to narrow down the query results.
    """
    where: Clinic_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Clinic_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Clinic_Having
  ): [Clinic!]! @fdc_generated(from: "Clinic", purpose: QUERY_MULTIPLE)
  """
  ✨ List `ClinicSpace` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  clinicSpaces(
    """
    Filter condition to narrow down the query results.
    """
    where: ClinicSpace_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ClinicSpace_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ClinicSpace_Having
  ): [ClinicSpace!]! @fdc_generated(from: "ClinicSpace", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Review` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  reviews(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [Review!]! @fdc_generated(from: "Review", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Therapist` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  therapists(
    """
    Filter condition to narrow down the query results.
    """
    where: Therapist_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Therapist_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Therapist_Having
  ): [Therapist!]! @fdc_generated(from: "Therapist", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
