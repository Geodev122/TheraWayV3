extend type Appointment {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Appointment", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Appointment` table.
  """
  _count: Int! @fdc_generated(from: "Appointment", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Appointment` table where the `bookingId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  bookingId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Appointment.bookingId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Appointment` table where the `clientId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  clientId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Appointment.clientId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Appointment` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Appointment.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Appointment` table where the `notes` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  notes_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Appointment.notes", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Appointment` table where the `startTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Appointment.startTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Appointment` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Appointment.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Appointment` table where the `therapistId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  therapistId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Appointment.therapistId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `startTime` field in the `Appointment` table.
  """
  startTime_min: Timestamp @fdc_generated(from: "Appointment.startTime", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `startTime` field in the `Appointment` table.
  """
  startTime_max: Timestamp @fdc_generated(from: "Appointment.startTime", purpose: QUERY_MAX)
}
extend type Booking {
  """
  ✨ List `Appointment` objects in a one-to-many relationship (where `Appointment`.`booking` is this object).
  """
  appointments_on_booking(
    """
    Filter condition to narrow down the query results.
    """
    where: Appointment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Appointment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Appointment_Having
  ): [Appointment!]! @fdc_generated(from: "Appointment.booking", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Booking", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Booking` table.
  """
  _count: Int! @fdc_generated(from: "Booking", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Booking` table where the `clientId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  clientId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Booking.clientId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Booking` table where the `clinicSpaceId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  clinicSpaceId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Booking.clinicSpaceId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Booking` table where the `endTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Booking.endTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Booking` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Booking.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Booking` table where the `startTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Booking.startTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Booking` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Booking.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Booking` table where the `therapistId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  therapistId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Booking.therapistId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Booking` table where the `totalCost` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  totalCost_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Booking.totalCost", purpose: QUERY_COUNT)
  """
  ✨ Sum the `totalCost` field in the `Booking` table.
  """
  totalCost_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Booking.totalCost", purpose: QUERY_SUM)
  """
  ✨ Average the `totalCost` field in the `Booking` table.
  """
  totalCost_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Booking.totalCost", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `endTime` field in the `Booking` table.
  """
  endTime_min: Timestamp @fdc_generated(from: "Booking.endTime", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startTime` field in the `Booking` table.
  """
  startTime_min: Timestamp @fdc_generated(from: "Booking.startTime", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `totalCost` field in the `Booking` table.
  """
  totalCost_min: Float @fdc_generated(from: "Booking.totalCost", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `endTime` field in the `Booking` table.
  """
  endTime_max: Timestamp @fdc_generated(from: "Booking.endTime", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startTime` field in the `Booking` table.
  """
  startTime_max: Timestamp @fdc_generated(from: "Booking.startTime", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `totalCost` field in the `Booking` table.
  """
  totalCost_max: Float @fdc_generated(from: "Booking.totalCost", purpose: QUERY_MAX)
}
extend type Clinic {
  """
  ✨ List `ClinicSpace` objects in a one-to-many relationship (where `ClinicSpace`.`clinic` is this object).
  """
  clinicSpaces_on_clinic(
    """
    Filter condition to narrow down the query results.
    """
    where: ClinicSpace_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ClinicSpace_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ClinicSpace_Having
  ): [ClinicSpace!]! @fdc_generated(from: "ClinicSpace.clinic", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Clinic", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Clinic` table.
  """
  _count: Int! @fdc_generated(from: "Clinic", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Clinic` table where the `contactEmail` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contactEmail_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Clinic.contactEmail", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Clinic` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Clinic.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Clinic` table where the `location` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  location_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Clinic.location", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Clinic` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Clinic.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Clinic` table where the `ownerId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  ownerId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Clinic.ownerId", purpose: QUERY_COUNT)
}
extend type ClinicSpace {
  """
  ✨ List `Booking` objects in a one-to-many relationship (where `Booking`.`clinicSpace` is this object).
  """
  bookings_on_clinicSpace(
    """
    Filter condition to narrow down the query results.
    """
    where: Booking_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Booking_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Booking_Having
  ): [Booking!]! @fdc_generated(from: "Booking.clinicSpace", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ClinicSpace", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ClinicSpace` table.
  """
  _count: Int! @fdc_generated(from: "ClinicSpace", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ClinicSpace` table where the `clinicId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  clinicId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ClinicSpace.clinicId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ClinicSpace` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ClinicSpace.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ClinicSpace` table where the `hourlyRate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  hourlyRate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ClinicSpace.hourlyRate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ClinicSpace` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ClinicSpace.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ClinicSpace` table where the `imageUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  imageUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ClinicSpace.imageUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ClinicSpace` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ClinicSpace.name", purpose: QUERY_COUNT)
  """
  ✨ Sum the `hourlyRate` field in the `ClinicSpace` table.
  """
  hourlyRate_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ClinicSpace.hourlyRate", purpose: QUERY_SUM)
  """
  ✨ Average the `hourlyRate` field in the `ClinicSpace` table.
  """
  hourlyRate_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ClinicSpace.hourlyRate", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `hourlyRate` field in the `ClinicSpace` table.
  """
  hourlyRate_min: Float @fdc_generated(from: "ClinicSpace.hourlyRate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `hourlyRate` field in the `ClinicSpace` table.
  """
  hourlyRate_max: Float @fdc_generated(from: "ClinicSpace.hourlyRate", purpose: QUERY_MAX)
}
extend type Review {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Review", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Review` table.
  """
  _count: Int! @fdc_generated(from: "Review", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `clientId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  clientId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.clientId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `comment` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  comment_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.comment", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `rating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  rating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.rating", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Review` table where the `therapistId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  therapistId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Review.therapistId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `rating` field in the `Review` table.
  """
  rating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Review.rating", purpose: QUERY_SUM)
  """
  ✨ Average the `rating` field in the `Review` table.
  """
  rating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Review.rating", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `Review` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Review.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `rating` field in the `Review` table.
  """
  rating_min: Int @fdc_generated(from: "Review.rating", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Review` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Review.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `rating` field in the `Review` table.
  """
  rating_max: Int @fdc_generated(from: "Review.rating", purpose: QUERY_MAX)
}
extend type Therapist {
  """
  ✨ List `Appointment` objects in a one-to-many relationship (where `Appointment`.`therapist` is this object).
  """
  appointments_on_therapist(
    """
    Filter condition to narrow down the query results.
    """
    where: Appointment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Appointment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Appointment_Having
  ): [Appointment!]! @fdc_generated(from: "Appointment.therapist", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Booking` objects in a one-to-many relationship (where `Booking`.`therapist` is this object).
  """
  bookings_on_therapist(
    """
    Filter condition to narrow down the query results.
    """
    where: Booking_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Booking_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Booking_Having
  ): [Booking!]! @fdc_generated(from: "Booking.therapist", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Review` objects in a one-to-many relationship (where `Review`.`therapist` is this object).
  """
  reviews_on_therapist(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [Review!]! @fdc_generated(from: "Review.therapist", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `User` objects using `Review` as the join table (a `Review` object exists where its `therapist` is this and its `client` is that).
  """
  users_via_Review(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [User!]! @fdc_generated(from: "Review", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Therapist", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Therapist` table.
  """
  _count: Int! @fdc_generated(from: "Therapist", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Therapist` table where the `averageRating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  averageRating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Therapist.averageRating", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Therapist` table where the `bio` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  bio_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Therapist.bio", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Therapist` table where the `hourlyRate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  hourlyRate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Therapist.hourlyRate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Therapist` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Therapist.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Therapist` table where the `location` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  location_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Therapist.location", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Therapist` table where the `profilePictureUrl` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  profilePictureUrl_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Therapist.profilePictureUrl", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Therapist` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Therapist.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `averageRating` field in the `Therapist` table.
  """
  averageRating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Therapist.averageRating", purpose: QUERY_SUM)
  """
  ✨ Sum the `hourlyRate` field in the `Therapist` table.
  """
  hourlyRate_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Therapist.hourlyRate", purpose: QUERY_SUM)
  """
  ✨ Average the `averageRating` field in the `Therapist` table.
  """
  averageRating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Therapist.averageRating", purpose: QUERY_AVG)
  """
  ✨ Average the `hourlyRate` field in the `Therapist` table.
  """
  hourlyRate_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Therapist.hourlyRate", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `averageRating` field in the `Therapist` table.
  """
  averageRating_min: Float @fdc_generated(from: "Therapist.averageRating", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `hourlyRate` field in the `Therapist` table.
  """
  hourlyRate_min: Float @fdc_generated(from: "Therapist.hourlyRate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `averageRating` field in the `Therapist` table.
  """
  averageRating_max: Float @fdc_generated(from: "Therapist.averageRating", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `hourlyRate` field in the `Therapist` table.
  """
  hourlyRate_max: Float @fdc_generated(from: "Therapist.hourlyRate", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `Appointment` objects in a one-to-many relationship (where `Appointment`.`client` is this object).
  """
  appointments_on_client(
    """
    Filter condition to narrow down the query results.
    """
    where: Appointment_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Appointment_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Appointment_Having
  ): [Appointment!]! @fdc_generated(from: "Appointment.client", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Booking` objects in a one-to-many relationship (where `Booking`.`client` is this object).
  """
  bookings_on_client(
    """
    Filter condition to narrow down the query results.
    """
    where: Booking_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Booking_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Booking_Having
  ): [Booking!]! @fdc_generated(from: "Booking.client", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Clinic` objects in a one-to-many relationship (where `Clinic`.`owner` is this object).
  """
  clinics_on_owner(
    """
    Filter condition to narrow down the query results.
    """
    where: Clinic_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Clinic_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Clinic_Having
  ): [Clinic!]! @fdc_generated(from: "Clinic.owner", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Review` objects in a one-to-many relationship (where `Review`.`client` is this object).
  """
  reviews_on_client(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [Review!]! @fdc_generated(from: "Review.client", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Therapist` objects in a one-to-many relationship (where `Therapist`.`user` is this object).
  """
  therapists_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Therapist_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Therapist_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Therapist_Having
  ): [Therapist!]! @fdc_generated(from: "Therapist.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Therapist` objects using `Review` as the join table (a `Review` object exists where its `client` is this and its `therapist` is that).
  """
  therapists_via_Review(
    """
    Filter condition to narrow down the query results.
    """
    where: Review_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Review_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Review_Having
  ): [Therapist!]! @fdc_generated(from: "Review", purpose: QUERY_MULTIPLE_MANY_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `fullName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  fullName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.fullName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `role` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  role_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.role", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
}
