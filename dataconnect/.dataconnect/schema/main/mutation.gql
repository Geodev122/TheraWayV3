extend type Mutation {
  """
  ✨ Insert a single `Appointment` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  appointment_insert(
    """
    Data object to insert into the table.
    """
    data: Appointment_Data!
  ): Appointment_KeyOutput! @fdc_generated(from: "Appointment", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Booking` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  booking_insert(
    """
    Data object to insert into the table.
    """
    data: Booking_Data!
  ): Booking_KeyOutput! @fdc_generated(from: "Booking", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Clinic` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  clinic_insert(
    """
    Data object to insert into the table.
    """
    data: Clinic_Data!
  ): Clinic_KeyOutput! @fdc_generated(from: "Clinic", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `ClinicSpace` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  clinicSpace_insert(
    """
    Data object to insert into the table.
    """
    data: ClinicSpace_Data!
  ): ClinicSpace_KeyOutput! @fdc_generated(from: "ClinicSpace", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Review` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insert(
    """
    Data object to insert into the table.
    """
    data: Review_Data!
  ): Review_KeyOutput! @fdc_generated(from: "Review", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Therapist` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  therapist_insert(
    """
    Data object to insert into the table.
    """
    data: Therapist_Data!
  ): Therapist_KeyOutput! @fdc_generated(from: "Therapist", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table and return its key. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Appointment` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  appointment_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Appointment_Data!]!
  ): [Appointment_KeyOutput!]! @fdc_generated(from: "Appointment", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Booking` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  booking_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Booking_Data!]!
  ): [Booking_KeyOutput!]! @fdc_generated(from: "Booking", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Clinic` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  clinic_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Clinic_Data!]!
  ): [Clinic_KeyOutput!]! @fdc_generated(from: "Clinic", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `ClinicSpace` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  clinicSpace_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [ClinicSpace_Data!]!
  ): [ClinicSpace_KeyOutput!]! @fdc_generated(from: "ClinicSpace", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Review` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Review_Data!]!
  ): [Review_KeyOutput!]! @fdc_generated(from: "Review", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Therapist` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  therapist_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Therapist_Data!]!
  ): [Therapist_KeyOutput!]! @fdc_generated(from: "Therapist", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table and return their keys. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Appointment` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Appointment`.
  """
  appointment_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Appointment_Data!
  ): Appointment_KeyOutput! @fdc_generated(from: "Appointment", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Booking` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Booking`.
  """
  booking_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Booking_Data!
  ): Booking_KeyOutput! @fdc_generated(from: "Booking", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Clinic` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Clinic`.
  """
  clinic_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Clinic_Data!
  ): Clinic_KeyOutput! @fdc_generated(from: "Clinic", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `ClinicSpace` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ClinicSpace`.
  """
  clinicSpace_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: ClinicSpace_Data!
  ): ClinicSpace_KeyOutput! @fdc_generated(from: "ClinicSpace", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Review` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Review`.
  """
  review_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Review_Data!
  ): Review_KeyOutput! @fdc_generated(from: "Review", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Therapist` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Therapist`.
  """
  therapist_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Therapist_Data!
  ): Therapist_KeyOutput! @fdc_generated(from: "Therapist", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Appointment` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Appointment`.
  """
  appointment_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Appointment_Data!]!
  ): [Appointment_KeyOutput!]! @fdc_generated(from: "Appointment", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Booking` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Booking`.
  """
  booking_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Booking_Data!]!
  ): [Booking_KeyOutput!]! @fdc_generated(from: "Booking", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Clinic` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Clinic`.
  """
  clinic_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Clinic_Data!]!
  ): [Clinic_KeyOutput!]! @fdc_generated(from: "Clinic", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `ClinicSpace` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `ClinicSpace`.
  """
  clinicSpace_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [ClinicSpace_Data!]!
  ): [ClinicSpace_KeyOutput!]! @fdc_generated(from: "ClinicSpace", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Review` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Review`.
  """
  review_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Review_Data!]!
  ): [Review_KeyOutput!]! @fdc_generated(from: "Review", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Therapist` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `Therapist`.
  """
  therapist_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Therapist_Data!]!
  ): [Therapist_KeyOutput!]! @fdc_generated(from: "Therapist", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted or existing updated `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Appointment` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Appointment` or `null` if not found.
  """
  appointment_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Appointment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Appointment_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Appointment_Data!
  ): Appointment_KeyOutput @fdc_generated(from: "Appointment", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Booking` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Booking` or `null` if not found.
  """
  booking_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Booking_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Booking_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Booking_Data!
  ): Booking_KeyOutput @fdc_generated(from: "Booking", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Clinic` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Clinic` or `null` if not found.
  """
  clinic_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Clinic_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Clinic_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Clinic_Data!
  ): Clinic_KeyOutput @fdc_generated(from: "Clinic", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `ClinicSpace` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `ClinicSpace` or `null` if not found.
  """
  clinicSpace_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ClinicSpace_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ClinicSpace_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: ClinicSpace_Data!
  ): ClinicSpace_KeyOutput @fdc_generated(from: "ClinicSpace", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Review` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Review` or `null` if not found.
  """
  review_update(
    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Review_Data!
  ): Review_KeyOutput @fdc_generated(from: "Review", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Therapist` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `Therapist` or `null` if not found.
  """
  therapist_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Therapist_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Therapist_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Therapist_Data!
  ): Therapist_KeyOutput @fdc_generated(from: "Therapist", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns the key of the updated `User` or `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Appointment` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  appointment_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Appointment_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Appointment_Data!
  ): Int! @fdc_generated(from: "Appointment", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Booking` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  booking_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Booking_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Booking_Data!
  ): Int! @fdc_generated(from: "Booking", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Clinic` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  clinic_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Clinic_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Clinic_Data!
  ): Int! @fdc_generated(from: "Clinic", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `ClinicSpace` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  clinicSpace_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: ClinicSpace_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: ClinicSpace_Data!
  ): Int! @fdc_generated(from: "ClinicSpace", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Review` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  review_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Review_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Review_Data!
  ): Int! @fdc_generated(from: "Review", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Therapist` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  therapist_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Therapist_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Therapist_Data!
  ): Int! @fdc_generated(from: "Therapist", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Appointment` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  appointment_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Appointment_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Appointment_FirstRow
  ): Appointment_KeyOutput @fdc_generated(from: "Appointment", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Booking` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  booking_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Booking_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Booking_FirstRow
  ): Booking_KeyOutput @fdc_generated(from: "Booking", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Clinic` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  clinic_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Clinic_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Clinic_FirstRow
  ): Clinic_KeyOutput @fdc_generated(from: "Clinic", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `ClinicSpace` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  clinicSpace_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: ClinicSpace_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: ClinicSpace_FirstRow
  ): ClinicSpace_KeyOutput @fdc_generated(from: "ClinicSpace", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Review` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  review_delete(
    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow
  ): Review_KeyOutput @fdc_generated(from: "Review", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Therapist` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  therapist_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Therapist_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Therapist_FirstRow
  ): Therapist_KeyOutput @fdc_generated(from: "Therapist", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Appointment` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  appointment_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Appointment_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Appointment", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Booking` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  booking_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Booking_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Booking", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Clinic` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  clinic_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Clinic_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Clinic", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `ClinicSpace` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  clinicSpace_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: ClinicSpace_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "ClinicSpace", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Review` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  review_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Review_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Review", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Therapist` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  therapist_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Therapist_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Therapist", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
